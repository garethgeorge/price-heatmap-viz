{"version":3,"sources":["model/spotprices.js","components/spotheatmap.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","querystring","debug","getHeatMapData","_callee","startDate","stopDate","heatmapResponse","data","lookup","azs","insttypes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","datapoint","heatmap","_mnt_mountpoint_price_heatmap_viz_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","get","stringify","start","toISOString","stop","sent","error","Error","prices","filter","os","undefined","Symbol","iterator","done","value","key","az","insttype","includes","push","t0","return","finish","sort","Array","length","fill","map","_","instTypeIndex","azIndex","delta","abrupt","xLabels","yLabels","this","lerpColor","r1","g1","b1","r2","g2","b2","frac","c1","c2","concat","Math","round","SpotHeatMap","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loading","percentileThreshold","componentDidUpdate","_this2","setState","asyncToGenerator","regenerator_default","mark","values","datapoints","row","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","val","err","pLower","pUpper","valuesBelowZero","valuesAboveZero","threshold","min","max","floor","magMax","_this3","react_default","createElement","SyncLoader_default","color","updateColorThresholds","rows","index","style","backgroundColor","header","label","className","Component","App","Date","setDate","getDate","assign","event","target","margin","components_spotheatmap","instructions","textAlign","href","es","selected","onChange","changeStartDate","bind","changeStopDate","type","changePercentileThreshold","step","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.481ab3bb.chunk.js","sourcesContent":["const axios = require('axios');\n\nconst querystring = require('querystring');\nconst debug = require('debug')('model:spotprices');\n\nasync function getHeatMapData(startDate, stopDate) {\n  debug(\"fetching data from the server! start date: %o, stop date: %o\", startDate, stopDate);\n  const heatmapResponse = await axios.get('/api/client/get_heatmap?' + querystring.stringify({\n    start: startDate.toISOString(),\n    stop: stopDate.toISOString(),\n  }));\n  \n  if (heatmapResponse.data.error) {\n    throw new Error(heatmapResponse.data.error);\n  }\n\n  const data = heatmapResponse.data.prices.filter((data) => {\n    return data.os === \"Linux/UNIX\";\n  })\n\n  // create the arrays of azs and insttypes\n  const lookup = {};\n  const azs = []; // xLabels\n  const insttypes = []; // yLabels\n  for (const datapoint of data) {\n    datapoint.key = datapoint.az + \"\\0\" + datapoint.insttype;\n    lookup[datapoint.key] = datapoint;\n\n    if (!azs.includes(datapoint.az)) { // linear time is plenty fast for the data size\n      azs.push(datapoint.az);\n    } \n    if (!insttypes.includes(datapoint.insttype)) {\n      insttypes.push(datapoint.insttype);\n    }\n  }\n\n  azs.sort();\n  insttypes.sort();\n\n  // okay, great, now we need to build out a datastructure for that\n  const heatmap = new Array(insttypes.length)\n    .fill(0)\n    .map((_, instTypeIndex) => {\n      return new Array(azs.length).fill(0).map((_, azIndex) => {\n        const insttype = insttypes[instTypeIndex];\n        const az = azs[azIndex];\n\n        const datapoint = lookup[az + \"\\0\" + insttype];\n\n        if (!datapoint) {\n          debug(\"%o %o -- no datapoint\", az, insttype);\n          return null;\n        } else {\n          debug(\"%o %o -- delta: %o\", datapoint.az, datapoint.insttype, datapoint.delta);\n        }\n        return datapoint.delta;\n      });\n    });\n  \n  // constructed a matrix of the data\n  debug(\"constructed heatmap %o\", heatmap);\n  \n  // constructs a heat map\n  return {\n    xLabels: azs,\n    yLabels: insttypes,\n    heatmap: heatmap,\n  }\n}\n\nexport {getHeatMapData};\n\n/*\n  {\n    \"config_id\": \"1\",\n    \"az\": \"us-west-2c\",\n    \"insttype\": \"x1.32xlarge\",\n    \"os\": \"Linux/UNIX\",\n    \"price\": 3.0986,\n    \"timestamp\": \"2017-07-15T04:17:46.000Z\"\n  }\n*/","import React, { Component } from 'react';\nimport './spotheatmap.css';\n\nimport SyncLoader from 'react-spinners/SyncLoader';\n\nconst {getHeatMapData} = require('../model/spotprices');\n\nconst lerpColor = (r1, g1, b1, r2, g2, b2) => {\n  return (frac) => {\n    const c1 = 1 - frac;\n    const c2 = frac;\n    return `rgb(${Math.round(c1 * r1 + c2 * r2)}, ${Math.round(c1 * g1 + c2 * g2)}, ${Math.round(c1 * b1 + c2 * b2)})`;\n  };\n}\n\n// spot heat map\nclass SpotHeatMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      data: null,\n      percentileThreshold: props.percentileThreshold,\n    };\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  componentDidUpdate() {\n    if (\n        this.props.startDate !== this.state.startDate || \n        this.props.stopDate !== this.state.stopDate || \n        this.props.percentileThreshold !== this.state.percentileThreshold\n    ) {\n      // if we determine that what has changed is the date range, then we should fetch the data anew\n\n      this.setState({\n        loading: true,\n        data: null,\n        startDate: this.props.startDate,\n        stopDate: this.props.stopDate,\n        percentileThreshold: this.props.percentileThreshold\n      });\n  \n      const props = this.props;\n      \n      // load the data for the heat map\n      (async () => {\n        const data = await getHeatMapData(props.startDate, props.stopDate);\n        \n        this.setState({\n          \"loading\": false,\n          \"data\": data,\n        });\n      })();\n    }\n  }\n\n  updateColorThresholds() {\n    const values = [];\n    const datapoints = this.state.data.heatmap;\n    for (const row of datapoints) {\n      for (const val of row) {\n        values.push(val);\n      }\n    }\n\n    // clever code for picking pUpper and pLower such that \n    // when we pick colors, the colors are nice & accurate of the rough range\n    // of the values \n    let pLower = -1;\n    let pUpper = 1;\n\n    const valuesBelowZero = values.filter((val) => {\n      return val < 0;\n    });\n    const valuesAboveZero = values.filter((val) => {\n      return val > 0;\n    })\n\n    const threshold = Math.min(Math.max(this.state.percentileThreshold / 100.0, 0), 1);\n\n    if (valuesAboveZero.length > 0) {\n      valuesAboveZero.sort();\n      pUpper = valuesAboveZero[Math.floor(valuesAboveZero.length * (1 - threshold))];\n    }\n\n    if (valuesBelowZero.length > 0) {\n      valuesBelowZero.sort();\n      pLower = values[Math.floor(valuesBelowZero.length * threshold)];\n    }\n\n    const magMax = Math.max(pUpper, -pLower);\n    this.pUpper = magMax;\n    this.pLower = -magMax;\n  }\n\n  render() {\n    if (this.state.loading) {\n      // return <GridLoader loading={true} color={'#415EFF'}></GridLoader>\n      return <SyncLoader loading={true} color={'#415EFF'}></SyncLoader>\n    } else {\n      this.updateColorThresholds();\n\n      const pUpper = this.pUpper;\n      const pLower = this.pLower;\n      \n      const rows = this.state.data.heatmap.map((row, index) => {\n        return (\n          <tr>\n            <td><strong>{this.state.data.yLabels[index]}</strong></td>\n            {row.map((value) => {\n              let color;\n              if (value < 0) {\n                color = lerpColor(255, 255, 255, 0, 0, 255)(value / pLower);\n              } else {\n                color = lerpColor(255, 255, 255, 255, 0, 0)(value / pUpper);\n              }\n              if (value == null) \n                return (<td></td>);\n              return (<td style={{'backgroundColor': color}}>${Math.round(value * 1000) / 1000}</td>);\n            })}\n          </tr>\n        )\n      });\n\n      const header = this.state.data.xLabels.map((label) => {\n        return (\n          <th key={\"header:\" + label}>{label}</th>\n        )\n      });\n\n      return (\n        <table className=\"heatmap\">\n          <tbody>\n            <tr>\n              <th></th>\n              {header}\n            </tr>\n            {rows}\n          </tbody>\n        </table>\n      );\n\n    }\n  }\n}\n\nexport default SpotHeatMap;","import React, { Component } from 'react';\nimport './App.css';\n\n// bring in the date picker components\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport SpotHeatMap from \"./components/spotheatmap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const startDate = new Date();\n    const stopDate = new Date();\n    startDate.setDate(stopDate.getDate() - 365);\n\n    this.state = {\n      \"startDate\": null,\n      \"stopDate\": null,\n      \"percentileThreshold\": 8\n    }\n  }\n\n  changeStartDate(startDate) {\n    if (!startDate) return ;\n\n    const state = Object.assign({}, this.state);\n    state.startDate = startDate;\n    this.setState(state);\n  }\n\n  changeStopDate(stopDate) {\n    if (!stopDate) return ;\n    const state = Object.assign({}, this.state);\n    state.stopDate = stopDate;\n    this.setState(state);\n  }\n\n  changePercentileThreshold(event) {\n    const state = Object.assign({}, this.state);\n    state.percentileThreshold = event.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    // create the heatmap only if the dates are valid\n    let heatmap = null;\n    if (this.state.startDate != null && this.state.stopDate != null) {\n      heatmap = (\n        <center style={{margin: '20px'}}>\n          <SpotHeatMap\n            startDate={this.state.startDate}\n            stopDate={this.state.stopDate}\n            percentileThreshold={this.state.percentileThreshold}\n            />\n        </center>\n      )\n    }\n\n    // create the instructions\n    const instructions = (\n      <div style={{'textAlign': 'left'}}>\n        <p>\n          This <strong>spot price visualizer</strong> is a tool for exploring both long and short\n          term trends in the prices of instances on the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html\">spot market</a>\n        </p>\n        <p>\n          Usage:\n        </p>\n        <ul>\n          <li>First, pick a start date for the range of dates you wish to examine by clicking the 'start date' date picker or by typing a value in the box</li>\n          <li>Second, pick a stop date by clicking the 'stop date' date picker and entering your value</li>\n          <li>Third, for advanced users, enter the percentile threshold which will be used to determine colors. Leave this as default if you don't know what this means.</li>\n        </ul>\n        <p>\n          The spot price visualizer will then fetch the data for the prices on the 'start' and 'stop' dates and will display a heatmap visualization of \n          how the prices have changed between the two points in time. \n          The x axis at the top shows the az name and the y axis to the left shows the instance type.\n          The values in the table are the changes in price in dollars. \n          Red colors represent an increase in price and blue colors represent a decrease in price. Some table entries are empty, these are az/insttype\n          pairs for which no data is available as that instance type may not be offered in all regions.\n        </p>\n        <p>Note: Our archived data goes back to 2015.</p>\n        <p>This project is made by Gareth George at UC Santa Barbara’s <a href=\"http://www.cs.ucsb.edu/~ckrintz/racelab.html\">RACELab</a></p>\n      </div>\n    )\n\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          <h1>AWS SpotPrice Visualizer</h1>\n          <span>\n            <strong>Start Date: </strong>\n            <DatePicker\n              selected={this.state.startDate}\n              onChange={this.changeStartDate.bind(this)}\n            />\n          </span>\n\n          <span style={{margin: '10px'}}>\n            <strong>Stop Date: </strong>\n            <DatePicker\n              selected={this.state.stopDate}\n              onChange={this.changeStopDate.bind(this)}\n            />\n          </span>\n\n          <span style={{margin: '10px'}}>\n            <strong>Percentile Threshold</strong>\n            <input type=\"number\" onChange={this.changePercentileThreshold.bind(this)}\n              min=\"0\" max=\"100\" step=\"1\" value={this.state.percentileThreshold}></input>\n          </span>\n          \n          {heatmap}\n\n          <hr></hr>\n          {instructions}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}