{"version":3,"sources":["components/spotheatmap.js","pages/About.js","pages/Home.js","App.js","serviceWorker.js","index.js","model/spotprices.js"],"names":["getHeatMapData","require","lerpColor","r1","g1","b1","r2","g2","b2","frac","c1","c2","concat","Math","round","SpotHeatMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","data","threshold","percentage","componentDidUpdate","_this2","startDate","stopDate","assign","all_values","setState","asyncToGenerator","regenerator_default","a","mark","_callee","values","datapoints","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","row","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","datapoint","wrap","_context","prev","next","sent","heatmap","undefined","Symbol","iterator","done","value","push","delta","t0","return","finish","t1","sort","stop","console","log","forceUpdate","_this3","react_default","createElement","SyncLoader_default","color","colorizeValue","get_stats","mean","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","err","length","stddev","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","sqrt","colorNegative","colorPositive","percentage_changes","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","startprice","mag","pUpper","pLower","percentage_change","map","log2","abs","sign","rows","index","insttype","yLabels","key","xindex","az","xLabels","style","backgroundColor","stopprice","header","label","className","Component","About","PageHeader","textAlign","href","Home","location","thresh","query","queryString","parse","search","Date","setTime","getTime","setHours","parseFloat","updateQueryParams","bind","event","chngThreshTimeout","clearTimeout","target","toISOString","history","pathname","margin","components_spotheatmap","Link","to","es","selected","onChange","changeStartDate","changeStopDate","type","changeThreshold","min","max","step","width","display","checked","App","BrowserRouter","Route","exact","path","component","withRouter","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","axios","querystring","debug","heatmapResponse","lookup","zone_ids","insttypes","_home_node_app_client_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","get","stringify","start","error","Error","prices","filter","os","zone_id","includes","abrupt"],"mappings":"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","file":"static/js/main.e0bfc8d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './spotheatmap.css';\n\nimport SyncLoader from 'react-spinners/SyncLoader';\n\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\n\nconst {getHeatMapData} = require('../model/spotprices');\n\nconst lerpColor = (r1, g1, b1, r2, g2, b2) => {\n  return (frac) => {\n    if (frac < 0) frac = 0;\n    if (frac > 1) frac = 1;\n    const c1 = 1 - frac;\n    const c2 = frac;\n    return `rgb(${Math.round(c1 * r1 + c2 * r2)}, ${Math.round(c1 * g1 + c2 * g2)}, ${Math.round(c1 * b1 + c2 * b2)})`;\n  };\n}\n\n// spot heat map\n\nclass SpotHeatMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      data: null,\n      threshold: props.threshold,\n      percentage: props.percentage,\n    }\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  componentDidUpdate() {\n    if (\n        this.props.startDate !== this.state.startDate || \n        this.props.stopDate !== this.state.stopDate\n    ) {\n      // if we determine that what has changed is the date range, then we should fetch the data anew\n\n      const state = Object.assign({}, this.state);\n      state.loading = true;\n      state.data = null;\n      state.all_values = null;\n      state.startDate = this.props.startDate;\n      state.stopDate = this.props.stopDate;\n      this.setState(state);\n\n      // load the data for the heat map\n      const props = this.props;\n      (async () => {\n        const data = await getHeatMapData(props.startDate, props.stopDate);\n\n        const state = Object.assign({}, this.state);\n        state.loading = false;\n        state.data = data;\n\n        // used for computing color thresholds\n        {\n          const values = [];\n          const datapoints = data.heatmap;\n          for (const row of datapoints) {\n            for (const datapoint of row) {\n              if (datapoint != null) \n                values.push(datapoint.delta);\n            }\n          }\n\n          // we sort the values to make everything nice\n          values.sort();\n          state.all_values = values;\n        }\n        \n        // finally update the state\n        this.setState(state);\n      })();\n    }\n    \n    // if the percentile threshold property changed we do not need a full refresh :) \n    if (this.props.threshold !== this.state.threshold || this.props.percentage !== this.state.percentage) {\n      console.log(\"PERCENTAGE: \" , this.props.percentage);\n      const state = Object.assign({}, this.state);\n      state.threshold = this.props.threshold;\n      state.percentage = this.props.percentage;\n      this.setState(state);\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      // return <GridLoader loading={true} color={'#415EFF'}></GridLoader>\n      return <SyncLoader loading={true} color={'#415EFF'}></SyncLoader>\n    } else {\n\n      // calculate the standard deviation, and drop off the high end values\n\n      let colorizeValue;\n\n      const colorNegative = lerpColor(255, 255, 255, 0, 100, 255);\n      const colorPositive = lerpColor(255, 255, 255, 255, 0, 0)\n\n      function get_stats(values) {\n        let mean = 0;\n        for (const value of values) \n          mean += value;\n        mean /= values.length ;\n\n        let stddev = 0;\n        for (const value of values) \n          stddev += (value - mean) * (value - mean);\n        stddev /= values.length - 1;\n        stddev = Math.sqrt(stddev);\n        \n        return {\n          'stddev': stddev,\n          'mean': mean,\n        }\n      }\n\n      if (this.state.percentage) {\n        // we use the percentage change to decide\n        const percentage_changes = [];\n\n        for (const row of this.state.data.heatmap) {\n          for (const datapoint of row) {\n            if (datapoint != null) {\n              percentage_changes.push(datapoint.delta / datapoint.startprice);\n            }\n          }\n        }\n\n        const stats = get_stats(percentage_changes);\n\n        const mag = stats.stddev * this.state.threshold;\n\n        const pUpper = mag;\n        const pLower = -mag;\n\n        colorizeValue = (datapoint) => {\n          const percentage_change = datapoint.delta / datapoint.startprice;\n\n          if (percentage_change < 0) {\n            return colorNegative(percentage_change / pLower);\n          } else {\n            return colorPositive(percentage_change / pUpper);\n          }\n        }\n\n      } else {\n        let values = this.state.all_values.map((value) => {\n          return Math.log2(Math.abs(value) + 1) * Math.sign(value);\n        })\n  \n        const stats = get_stats(values);\n        const mag = stats.stddev * this.state.threshold;\n\n        const pUpper = mag;\n        const pLower = -mag;\n\n        colorizeValue = (datapoint) => {\n          if (datapoint.delta < 0) {\n            return colorNegative(datapoint.delta / pLower);\n          } else {\n            return colorPositive(datapoint.delta / pUpper);\n          }\n        }\n      }\n\n\n      \n      \n      \n      const rows = this.state.data.heatmap.map((row, index) => {\n        const insttype = this.state.data.yLabels[index];\n        return (\n          <tr key={'row-' + insttype}>\n            <td key={insttype}><strong> {insttype} </strong></td>\n            {row.map((datapoint, xindex) => {\n              const az = this.state.data.xLabels[xindex];\n              \n              if (datapoint == null) \n                return (<td key={az + '-' + insttype}></td>);\n              const value = datapoint.delta;\n\n              const color = colorizeValue(datapoint);\n              \n              if (this.state.percentage) {\n                return <td key={az + '-' + insttype} style={{'backgroundColor': color}}>\n                  ${Math.round(datapoint.stopprice * 100) / 100} <small>%{Math.round(datapoint.delta / datapoint.startprice * 100)}</small>\n                </td>\n              } else {\n                return <td key={az + '-' + insttype} style={{'backgroundColor': color}}>\n                  ${Math.round(datapoint.stopprice * 100) / 100} <small>${Math.round(value * 100) / 100}</small>\n                </td>  \n              }\n            })}\n          </tr>\n        )\n      });\n\n      const header = this.state.data.xLabels.map((label) => {\n        return (\n          <th key={label}> {label} </th>\n        )\n      });\n\n      return (\n        <table className=\"heatmap\">\n          <tbody>\n            <tr>\n              <th></th>\n              {header}\n            </tr>\n            {rows}\n          </tbody>\n        </table>\n      );\n\n    }\n  }\n}\n\nexport default SpotHeatMap;","import React, { Component } from 'react';\n\nimport {PageHeader, Panel, Alert} from 'react-bootstrap';\n\nconst About = () => {\n  \n  return (\n    <div className=\"container content\">\n      <center>\n        <PageHeader>\n          About \n        </PageHeader>\n      </center>\n      <h3>Interpreting the Data</h3>\n      <p>\n        The <strong>x axis shows the AZ ID</strong> and the <strong>y axis to the left shows the instance type</strong>.\n        It is important to be aware that the AZ ID is distinct from the AZ Name.\n        We choose to use AZ ID because, according to Amazon, the AZ ID is a \"unique and consistent \n        identifier for an availability zone\" it will have the same location (corresponds to the same\n        physical datacenter) in every account. This is not the case for the AZ Name which is a logical\n        identifier, to ensure that resources are \"distributed across the availability zones for a given region\"\n        Amazon independently maps availability zone names for each account. \n        For these reasons we provide data in terms of the AZ ID with the hope that users will be able to apply this data\n        to prices they see in their own accounts.\n      </p>\n      <p>The values in the table are the changes in average price in dollars.</p>\n      <p>\n        Red colors represent an increase in price and blue colors represent a decrease in price. Some table entries are empty, these are az/insttype\n        pairs for which no data is available. This is often the case because an instance type may not be offered in all regions.\n      </p>\n\n\n      <h3>Usage</h3>\n      <div style={{'textAlign': 'left'}}>\n        <p>\n          This <strong>spot price visualizer</strong> is a tool for exploring both long and short\n          term trends in the prices of instances on the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html\">spot market</a>\n        </p>\n        <p>\n          Usage:\n        </p>\n        <ul>\n          <li>First, pick a start date for the range of dates you wish to examine by clicking the 'start date' date picker or by typing a value in the box</li>\n          <li>Second, pick a stop date by clicking the 'stop date' date picker and entering your value</li>\n          <li>\n            Finally, play with the threshold slider which will determine how sensative the colorization of the data is to price change, and the 'percentage change' toggle to switch the table between\n            showing percentage change and the raw delta in dollars.\n          </li>\n        </ul>\n        <p>\n          The spot price visualizer will then fetch the data for the prices on the 'start' and 'stop' dates and will display a heatmap visualization of \n          how the prices have changed between the two points in time.  It\n    computes the average price before and after the midpoint between the\n          two dates and reports the difference.\n          \n        </p>\n        <p><em>Note: Our archived data goes back to 2015.</em></p>\n        {/* <p>This project is made by Gareth George at UC Santa Barbara’s <a href=\"http://www.cs.ucsb.edu/~ckrintz/racelab.html\">RACELab</a></p> */}\n      </div>\n    </div>\n  )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport '../App.css';\n\n// bring in the date picker components\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport {PageHeader, Panel, Alert} from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Link, withRouter} from \"react-router-dom\";\n\nimport SpotHeatMap from \"../components/spotheatmap\";\nimport queryString from \"query-string\"\n\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    console.log(this.props.location);\n    const query = queryString.parse(this.props.location.search);\n\n    let startDate, stopDate, thresh, percentage = true;\n    if (!query[\"startDate\"]) {\n      startDate = new Date();\n      startDate.setTime(startDate.getTime() - 2 * 7 * 24 * 3600 * 1000);\n      startDate.setHours(0);\n    } else {\n      startDate = new Date(query[\"startDate\"]);\n    }\n\n    if (!query[\"stopDate\"]) {\n      stopDate = new Date();\n      stopDate.setHours(0);\n    } else {\n      stopDate = new Date(query[\"stopDate\"]);\n    }\n\n    if (!query[\"thresh\"]) {\n      thresh = 0.5;\n    } else {\n      thresh = parseFloat(query[\"thresh\"]);\n    }\n\n    if (query[\"percentage\"]) {\n      percentage = query[\"percentage\"] == \"true\";\n    }\n\n    this.state = {\n      \"startDate\": startDate,\n      \"stopDate\": stopDate,\n      \"threshold\": thresh,\n      \"percentage\": percentage,\n    }\n  }\n\n  changeStartDate(startDate) {\n    if (!startDate) return ;\n\n    const state = Object.assign({}, this.state);\n    state.startDate = startDate;\n    this.setState(state, this.updateQueryParams.bind(this));\n  }\n\n  changeStopDate(stopDate) {\n    if (!stopDate) return ;\n    const state = Object.assign({}, this.state);\n    state.stopDate = stopDate;\n    this.setState(state, this.updateQueryParams.bind(this));\n  }\n\n  changeThreshold(event) {\n    if (this.chngThreshTimeout) {\n      clearTimeout(this.chngThreshTimeout);\n    }\n\n    const state = Object.assign({}, this.state);\n    state.threshold = event.target.value;\n\n    // this.chngThreshTimeout = setTimeout(() => {\n      this.setState(state, this.updateQueryParams.bind(this));\n    // }, 50);\n  }\n\n  updateQueryParams() {\n    const search = `?startDate=${this.state.startDate.toISOString()}&stopDate=${this.state.stopDate.toISOString()}&thresh=${this.state.threshold}&percentage=${this.state.percentage}`;\n    if (search === this.props.location.search) return ;\n    \n    // limit update frequency\n    this.props.history.push({\n      pathname: this.props.location.pathname,\n      search: `?startDate=${this.state.startDate.toISOString()}&stopDate=${this.state.stopDate.toISOString()}&thresh=${this.state.threshold}&percentage=${this.state.percentage}`\n    })\n  }\n\n  render() {\n    // create the heatmap only if the dates are valid\n    let heatmap = null;\n    if (this.state.startDate != null && this.state.stopDate != null) {\n      heatmap = (\n        <center style={{margin: '20px'}}>\n          <SpotHeatMap\n            startDate={this.state.startDate}\n            stopDate={this.state.stopDate}\n            threshold={this.state.threshold}\n            percentage={this.state.percentage}\n            />\n        </center>\n      )\n    }\n\n    // create the instructions\n\n    return (\n      <div className=\"App\">\n        <div className=\"container content\">\n          <PageHeader>\n            <a href=\"https://federatedcloud.org\">Aristotle</a> AWS SpotPrice Visualizer <small>(Beta Version 1.0) </small>\n          </PageHeader>\n\n          <h4>For usage instructions see the <Link to=\"/about\">/about</Link> page</h4>\n\n          <hr></hr>\n\n          <span>\n            <strong>Start Date: </strong>\n            <DatePicker\n              selected={this.state.startDate}\n              onChange={this.changeStartDate.bind(this)}\n            />\n          </span>\n\n          <span style={{margin: '10px'}}>\n            <strong>Stop Date: </strong>\n            <DatePicker\n              selected={this.state.stopDate}\n              onChange={this.changeStopDate.bind(this)}\n            />\n          </span>\n\n          <span style={{margin: '10px'}}>\n            <strong>Threshold </strong>\n            <input type=\"range\" onChange={this.changeThreshold.bind(this)}\n              min=\"0.05\" max=\"2\" step=\"0.05\" style={{width: '100px', display: 'inline'}} value={this.state.threshold}></input>\n            <input type=\"number\" onChange={this.changeThreshold.bind(this)}\n              min=\"0.05\" max=\"2\" step=\"0.05\" value={this.state.threshold}></input> \n            <strong> Show % Change </strong>\n            <input type=\"checkbox\" onChange={(event) => {\n              const state = Object.assign({}, this.state);\n              console.log(event.target.checked);\n              state.percentage = event.target.checked;\n              this.setState(state, this.updateQueryParams.bind(this));\n            }} checked={this.state.percentage}></input>\n          </span>\n          \n          {heatmap}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\n\n// bring in the date picker components\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport {PageHeader, Panel} from 'react-bootstrap';\n\nimport SpotHeatMap from \"./components/spotheatmap\";\nimport { BrowserRouter as Router, Route, Link, withRouter} from \"react-router-dom\";\nimport queryString from \"query-string\"\n\nimport About from './pages/About'\nimport Home from './pages/Home'\n\n\nconst App = () => {\n  return (\n    <Router >\n      <div>\n        <Route exact path=\"/\" component={withRouter(Home)} />\n        <Route path=\"/about\" component={withRouter(About)} />\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const axios = require('axios');\n\nconst querystring = require('querystring');\nconst debug = require('debug')('model:spotprices');\n\nasync function getHeatMapData(startDate, stopDate) {\n  debug(\"fetching data from the server! start date: %o, stop date: %o\", startDate, stopDate);\n  const heatmapResponse = await axios.get('/api/client/get_heatmap?' + querystring.stringify({\n    start: startDate.toISOString(),\n    stop: stopDate.toISOString(),\n  }));\n  \n  if (heatmapResponse.data.error) {\n    throw new Error(heatmapResponse.data.error);\n  }\n\n  const data = heatmapResponse.data.prices.filter((data) => {\n    return data.os === \"Linux/UNIX\";\n  })\n\n  // create the arrays of zone_ids and insttypes\n  const lookup = {};\n  const zone_ids = []; // xLabels\n  const insttypes = []; // yLabels\n  for (const datapoint of data) {\n    datapoint.key = datapoint.zone_id + \"\\0\" + datapoint.insttype;\n    lookup[datapoint.key] = datapoint;\n\n    if (!zone_ids.includes(datapoint.zone_id)) { // linear time is plenty fast for the data size\n      zone_ids.push(datapoint.zone_id);\n    } \n    if (!insttypes.includes(datapoint.insttype)) {\n      insttypes.push(datapoint.insttype);\n    }\n  }\n\n  zone_ids.sort();\n  insttypes.sort();\n\n  // okay, great, now we need to build out a datastructure for that\n  const heatmap = insttypes\n    .map((insttype) => {\n      return zone_ids.map((zone_id) => {\n        const datapoint = lookup[zone_id + \"\\0\" + insttype];\n\n        if (!datapoint) {\n          debug(\"%o %o -- no datapoint\", zone_id, insttype);\n          return null;\n        } else {\n          debug(\"%o %o -- delta: %o\", datapoint.zone_id, datapoint.insttype, datapoint.delta);\n        }\n        return datapoint;\n      });\n    });\n  \n  // constructed a matrix of the data\n  debug(\"constructed heatmap %o\", heatmap);\n  \n  // constructs a heat map\n  return {\n    xLabels: zone_ids,\n    yLabels: insttypes,\n    heatmap: heatmap,\n    lookup: lookup,\n  }\n}\n\nexport {getHeatMapData};\n\n/*\n  {\n    \"config_id\": \"1\",\n    \"az\": \"us-west-2c\",\n    \"insttype\": \"x1.32xlarge\",\n    \"os\": \"Linux/UNIX\",\n    \"price\": 3.0986,\n    \"timestamp\": \"2017-07-15T04:17:46.000Z\"\n  }\n*/"],"sourceRoot":""}